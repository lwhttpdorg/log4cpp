project(liblog4cpp)

set(TARGET_NAME log4cpp)

file(GLOB SRC_FILES "*.cpp")

if (CMAKE_HOST_WIN32)
    add_library(${TARGET_NAME} STATIC ${SRC_FILES})
else ()
    add_library(${TARGET_NAME} SHARED ${SRC_FILES})
endif ()

#set(Boost_DEBUG ON)
set(Boost_VERBOSE ON)
set(MINI_BOOST_VERSION "1.75")
if (CMAKE_VERSION GREATER_EQUAL "3.12")
    cmake_policy(SET CMP0074 NEW)
endif ()
if (CMAKE_HOST_WIN32)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        set(BOOST_ROOT "D:/OpenCode/boost/gcc")
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
        set(BOOST_ROOT "D:/OpenCode/boost/msvc")
    endif ()
endif ()

if (CMAKE_VERSION GREATER_EQUAL "3.27")
    cmake_policy(SET CMP0144 NEW)
endif ()
if (CMAKE_VERSION GREATER_EQUAL "3.30")
    cmake_policy(SET CMP0167 NEW)
    find_package(Boost ${MINI_BOOST_VERSION} QUIET COMPONENTS json CONFIG)
else ()
    find_package(Boost ${MINI_BOOST_VERSION} QUIET COMPONENTS json)
endif ()
if (Boost_FOUND)
    message(STATUS "Boost version: ${Boost_VERSION}")
    message(STATUS "Boost include dirs: ${Boost_INCLUDE_DIRS}")
    message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${Boost_LIBRARY_DIRS})
    target_link_libraries(${TARGET_NAME} ${Boost_LIBRARIES})
    if (CMAKE_HOST_WIN32)
        file(GLOB BOOST_JSON_DLL "${BOOST_ROOT}/lib/*json*.dll")
        file(COPY ${BOOST_JSON_DLL} DESTINATION ${EXECUTABLE_OUTPUT_PATH})
    endif ()
else ()
    message(STATUS "Boost not found! downloading from github...")
    set(BOOST_INCLUDE_LIBRARIES json algorithm)
    set(BOOST_ENABLE_CMAKE ON)
    if ((CMAKE_HOST_WIN32) AND (ENABLE_TESTS))
        set(BUILD_SHARED_LIBS OFF)
    else ()
        set(BUILD_SHARED_LIBS ON)
    endif ()
    set(BOOST_RUNTIME_LINK shared)
    set(BOOST_INSTALL_LAYOUT system)
    set(BOOST_ENABLE_PYTHON OFF)
    set(BOOST_ENABLE_MPI OFF)

    include(FetchContent)
    if (${CMAKE_VERSION} VERSION_LESS "3.24")
        FetchContent_Declare(
                Boost
                URL https://github.com/boostorg/boost/releases/download/boost-1.87.0/boost-1.87.0-cmake.zip
                URL_HASH SHA256=03530dec778bc1b85b070f0b077f3b01fd417133509bb19fe7c142e47777a87b
        )
    else ()
        FetchContent_Declare(
                Boost
                URL https://github.com/boostorg/boost/releases/download/boost-1.87.0/boost-1.87.0-cmake.zip
                URL_HASH SHA256=03530dec778bc1b85b070f0b077f3b01fd417133509bb19fe7c142e47777a87b
                DOWNLOAD_EXTRACT_TIMESTAMP FALSE
        )
    endif ()

    FetchContent_MakeAvailable(Boost)
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            set_target_properties(boost_json PROPERTIES COMPILE_FLAGS "-g -O0")
            set_target_properties(boost_algorithm PROPERTIES COMPILE_FLAGS "-g -O0")
        endif ()
    else ()
        if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            set_target_properties(boost_json PROPERTIES COMPILE_FLAGS "-g -O2")
            set_target_properties(boost_algorithm PROPERTIES COMPILE_FLAGS "-g -O2")
        endif ()
    endif ()
    target_link_libraries(${TARGET_NAME} Boost::json Boost::algorithm)
endif ()

if (CMAKE_HOST_WIN32)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        add_compile_definitions(WIN32_LEAN_AND_MEAN)
    endif ()
    target_link_libraries(${TARGET_NAME} ws2_32)
endif ()

if (CMAKE_HOST_UNIX)
    target_link_libraries(${TARGET_NAME} pthread)
endif ()

install(FILES ${INSTALL_HEAD_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
install(TARGETS ${TARGET_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

